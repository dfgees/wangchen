import numpy as np

# 输入数据
p = [
    [1,1,1,1,0,1,1,0,1,1,1,1],  # p[1]
    [0,1,1,1,0,1,1,0,1,1,1,1],  # p[2]
    [1,1,0,1,0,1,1,0,1,1,1,1],  # p[3]
    [1,1,1,1,0,1,1,0,1,1,1,0],  # p[4]
    [1,1,1,1,0,1,1,0,1,0,1,1],  # p[5]
    [0,0,0,1,1,1,1,1,1,1,1,1],  # p[6]
    [0,0,0,0,1,1,1,0,1,1,1,1],  # p[7]
    [0,0,0,1,1,0,1,0,1,1,1,1],  # p[8]
    [0,0,0,1,1,1,1,0,1,1,1,0],  # p[9]
    [0,0,0,1,1,1,1,0,1,0,1,1],  # p[10]
    [1,1,1,1,0,1,1,1,1,0,0,0],  # p[11]
    [0,1,1,1,0,1,1,1,1,0,0,0],  # p[12]
    [1,1,0,1,0,1,1,1,1,0,0,0],  # p[13]
    [1,1,1,1,0,1,1,1,0,0,0,0],  # p[14]
    [1,1,1,1,0,1,0,1,1,0,0,0],  # p[15]
    [1,0,1,1,0,1,1,0,1,1,1,1],  # p[16]
    [1,1,1,1,0,0,1,0,1,1,1,1],  # p[17]
    [1,1,1,1,0,1,1,0,0,1,1,1],  # p[18]
    [1,1,1,1,0,1,1,0,1,1,0,1],  # p[19]
    [1,1,1,1,0,1,0,0,1,1,1,1],  # p[20]
    [1,1,1,0,0,1,1,0,1,1,1,1],  # p[21]
    [0,0,1,1,0,1,1,0,1,1,1,1],  # p[22]
    [0,1,1,1,0,0,1,0,1,1,1,1],  # p[23]
    [0,1,1,1,0,1,1,0,0,1,1,1],  # p[24]
    [0,1,1,1,0,1,1,0,1,1,0,1],  # p[25]
    [0,1,1,1,0,1,0,0,1,1,1,1],  # p[26]
    [0,1,1,0,0,1,1,0,1,1,1,1],  # p[27]
    [1,1,0,1,0,0,1,0,1,1,1,1],  # p[28]
    [1,1,0,1,0,1,1,0,0,1,1,1],  # p[29]
    [1,1,0,1,0,1,1,0,1,1,0,1],  # p[30]
    [1,1,0,1,0,1,0,0,1,1,1,1],  # p[31]
    [1,1,0,0,0,1,1,0,1,1,1,1],  # p[32]
    [0,1,0,0,1,0,0,1,0,0,1,0],  # p[33]
    [1,1,0,0,1,0,0,1,0,0,1,0],  # p[34]
    [0,1,0,0,1,0,0,1,0,0,1,0],  # p[35]
    [0,1,0,0,1,0,0,1,0,1,1,0],  # p[36]
    [0,1,0,0,1,0,0,1,0,0,1,1],  # p[37]
    [1,1,0,0,1,0,0,1,0,1,1,0],  # p[38]
    [1,1,0,0,1,0,0,1,0,0,1,1],  # p[39]
    [1,1,0,0,1,0,0,1,0,1,1,1],  # p[40]
    [0,1,0,0,1,1,0,1,0,0,1,0],  # p[41]
    [0,1,0,0,1,0,1,0,0,1,0,1],  # p[42]
    [1,1,0,0,1,1,0,1,0,0,1,0],  # p[43]
    [1,1,0,0,1,0,0,1,0,0,1,0],  # p[44]
    [0,1,0,0,1,1,0,1,0,1,1,0],  # p[45]
    [0,1,0,0,1,0,0,1,1,0,0,1],  # p[46]
    [0,1,0,0,1,0,0,1,0,1,1,1],  # p[47]
    [1,1,0,0,1,1,0,1,1,0,1,1],  # p[48]
    [1,1,0,0,1,0,0,1,0,0,1,0],  # p[49]
    [0,1,1,0,1,1,0,1,1,0,1,1],  # p[50]
    [1,1,0,1,1,0,0,1,0,0,1,0],  # p[51]
    [1,1,0,0,1,0,1,1,0,0,1,0],  # p[52]
    [1,1,0,1,1,0,1,1,0,1,1,0],  # p[53]
    [1,1,0,0,1,0,0,0,0,0,1,0],  # p[54]
    [0,1,0,0,1,0,0,1,0,1,0,0],  # p[55]
    [1,0,0,0,1,0,0,1,0,0,1,0],  # p[56]
    [1,0,0,0,1,0,0,1,0,0,0,1],  # p[57]
    [0,1,0,0,0,0,0,1,0,1,1,0],  # p[58]
    [0,1,0,0,1,0,0,0,0,1,1,0],  # p[59]
    [0,0,0,0,1,0,0,1,0,1,1,0],  # p[60]
    [0,0,0,0,1,0,0,1,0,1,1,0],  # p[61]
    [0,1,0,0,1,0,0,1,0,0,0,0],  # p[62]
    [0,1,0,0,0,1,0,0,1,0,1,0],  # p[63]
    [0,1,0,1,0,0,1,0,0,0,1,0]   # p[64]
]

# 权重和偏置
w1 = np.array([
    [2.064, 3.362, -0.629, -6.624, -0.328, -6.008, -2.576, 12.225, -1.782, -8.619, 13.895, -1.377],
    [2.093, 0.148, 1.095, -1.265, 10.411, -1.366, 9.774, 0.339, 0.981, -0.286, 5.199, 1.272],
    [0.669, -10.110, 0.683, 7.166, -4.143, 13.077, 10.521, -0.361, 4.721, 0.795, -7.235, 1.981]
])

w2 = np.array([
    [-14.252, -3.699, 9.334],
    [2.77813, 7.15097, -17.322]
])

b1 = np.array([-0.987, 0.841, -3.588])  # 输入层到隐藏层的偏置
b2 = np.array([6.644, -0.3271])  # 隐藏层到输出层的偏置

# Sigmoid 激活函数
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

# 前向传播函数
def forward_pass(input_data):
    # 输入到隐藏层
    hidden_input = np.dot(input_data, w1.T) + b1
    hidden_output = sigmoid(hidden_input)
    
    # 隐藏层到输出层
    output_input = np.dot(hidden_output, w2.T) + b2
    output = sigmoid(output_input)
    
    return output

# 遍历每个输入向量并计算输出
for i, input_vector in enumerate(p):
    input_data = np.array(input_vector)
    output = forward_pass(input_data)
    rounded_output = [round(value) for value in output]  # 四舍五入
    
    # 判断图像类别
    if rounded_output == [1, 0]:
        category = "0"
    elif rounded_output == [0, 1]:
        category = "1"
    else:
        category = "未知"  # 如果输出不是 [1, 0] 或 [0, 1]，则标记为未知
    
    print(f"p[{i+1}] 的输出: {rounded_output}, 图像类别: {category}")
